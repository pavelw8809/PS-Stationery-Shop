{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\WSB_SELCOR\\\\PROJECT\\\\src\\\\components\\\\ArtCard\\\\ArtCard.js\";\n\n/*\r\n    Plik:               ArtCard.js\r\n    Funkcja:            KARTA PRODUKTU\r\n    Opis:               Wyświetla bieżący produkt w karcie.\r\n    Elementy:           Zdjęcie {props.imagename}, \r\n                        nazwa produktu {props.name}, \r\n                        opis produktu {props.description}, \r\n                        cena {props.price}, \r\n                        wybór ilości +/-, \r\n                        przycisk koszyka\r\n    Przykład użycia:    <ArtCard imagename={nazwa_zdjecia} name={nazwa_artykulu} description={opis artykulu} price={cena} />\r\n    Dodatkowe info:     {nazwa_zdjecia} ma korespondowac z numerem artykulu w bazie danych\r\n*/\nimport React, { useState, useContext, useEffect } from 'react';\nimport App, { TotalContext } from '../../containers/App';\nimport carticon from '../../images/icons/black_cart.png';\nimport \"./ArtCard.scss\"; // Import arkusza stylu dla dla komponentu\n\nimport { NavLink } from 'react-router-dom';\n\nconst Artcard = props => {\n  const [counter, setCounter] = useState({\n    quantity: 0\n  }); //const [Cart, setCart] = useContext(CartContext);\n\n  const [Total, setTotal] = useContext(TotalContext); //const [CartTemp, setCartTemp] = useState([]);\n  //let CartStorage\n\n  const Image = require('../../images/images/' + props.imagename + '.png'); // Ścieżka do zdjęcia\n\n\n  let ProdImgStyle;\n  ProdImgStyle = {\n    // Stylizacja zdjęcia - zdjęcie jako tło karty\n    backgroundImage: \"url(\" + Image + \")\",\n    backgroundColor: 'white'\n  };\n  useEffect(() => {//CartStorage = JSON.parse(localStorage.getItem('pscart'));\n    //setCartTemp(CartStorage);\n    //console.log(CartTemp);\n  }, []); //console.log(initCart);\n\n  let CartStorage = JSON.parse(localStorage.getItem('pscart'));\n\n  const increaseQuantity = () => {\n    if (counter.quantity < 100) {\n      setCounter({\n        quantity: counter.quantity + 1\n      });\n    }\n  };\n\n  const decreaseQuantity = () => {\n    if (counter.quantity > 0) {\n      setCounter({\n        quantity: counter.quantity - 1\n      });\n    }\n  };\n\n  const handleQuantity = event => {\n    let regexp = /^[0-9\\b]+$/;\n    let input = event.target.value;\n\n    if (regexp.test(input)) {\n      setCounter({\n        quantity: parseInt(input)\n      });\n    } else {\n      document.querySelector(\".qInput\").value = 0;\n    }\n  };\n\n  const addProd = (prodid, name, desc, q, price, imagename) => {\n    let check = 0;\n    let idToChange;\n    let orSum = parseFloat(q * price); //let CartStorage;\n\n    CartStorage.map((r, index) => {\n      if (r.prodid === prodid) {\n        check = 1;\n        idToChange = parseInt(index);\n      }\n    });\n\n    if (q > 0) {\n      if (check === 0) {\n        //setCart(prevCart => ([...Cart, {\n        //id: Cart.length, \n        //    prodid: prodid,\n        //    name: name, \n        //    desc: desc,\n        //    price: parseFloat(price),\n        //   quantity: q, \n        //    prodtotal: q*price,\n        //    imagename: imagename\n        //}]))\n        let CartStorageN = [...CartStorage, {\n          //id: CartStorage.length,\n          prodid: prodid,\n          name: name,\n          shortdesc: props.shortdesc,\n          desc: desc,\n          price: parseFloat(price),\n          quantity: q,\n          prodtotal: q * price,\n          imagename: imagename\n        }];\n        localStorage.setItem('pscart', JSON.stringify(CartStorageN)); //console.log(newCartStorage);\n      } else {\n        //let newCart = [...Cart];\n        //newCart[idToChange].quantity = newCart[idToChange].quantity+q;\n        //newCart[idToChange].prodtotal = newCart[idToChange].price*newCart[idToChange].quantity;\n        let CartStorageN = [...CartStorage];\n        console.log(CartStorageN[idToChange]);\n        CartStorageN[idToChange].quantity = CartStorageN[idToChange].quantity + q;\n        CartStorageN[idToChange].prodtotal = CartStorageN[idToChange].price * CartStorageN[idToChange].quantity;\n        localStorage.setItem('pscart', JSON.stringify(CartStorageN));\n        const cartarray = [];\n        const sum = Object.values(CartStorage).map(obj => {\n          cartarray.push(obj.prodtotal);\n          return obj.prodtotal;\n        }).reduce((sum, el) => {\n          console.log(sum + el);\n          return sum + el;\n        }, 0);\n        setTotal({\n          total: sum\n        });\n      }\n\n      setCounter({\n        quantity: 0\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"artCard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(NavLink, {\n    className: \"LinkToArtDetails\",\n    to: {\n      pathname: \"/artdetails\",\n      artProps: {\n        name: props.name,\n        shortdesc: props.shortdesc,\n        description: props.description,\n        price: props.price,\n        imagename: props.imagename,\n        prodid: props.prodid\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"ProdImgContainer\",\n    style: ProdImgStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"ProdInfo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, props.name), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, props.shortdesc))), React.createElement(\"div\", {\n    className: \"ProdState\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"PriceOrder\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, props.price), React.createElement(\"div\", {\n    className: \"OrderBar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"qBtn\",\n    onClick: increaseQuantity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, \"+\"), React.createElement(\"input\", {\n    className: \"qInput\",\n    type: \"text\",\n    value: counter.quantity,\n    onChange: handleQuantity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"qBtn\",\n    onClick: decreaseQuantity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"-\"))), React.createElement(\"button\", {\n    className: \"ToCartBtn\",\n    onClick: addProd.bind(this, props.prodid, props.name, props.shortdesc, counter.quantity, props.price, props.imagename),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"carticonBtn\",\n    src: carticon,\n    alt: \"cart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }), \"DO KOSZYKA\")));\n};\n\nexport default Artcard;","map":{"version":3,"sources":["C:/xampp/htdocs/WSB_SELCOR/PROJECT/src/components/ArtCard/ArtCard.js"],"names":["React","useState","useContext","useEffect","App","TotalContext","carticon","NavLink","Artcard","props","counter","setCounter","quantity","Total","setTotal","Image","require","imagename","ProdImgStyle","backgroundImage","backgroundColor","CartStorage","JSON","parse","localStorage","getItem","increaseQuantity","decreaseQuantity","handleQuantity","event","regexp","input","target","value","test","parseInt","document","querySelector","addProd","prodid","name","desc","q","price","check","idToChange","orSum","parseFloat","map","r","index","CartStorageN","shortdesc","prodtotal","setItem","stringify","console","log","cartarray","sum","Object","values","obj","push","reduce","el","total","pathname","artProps","description","bind"],"mappings":"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","sourcesContent":["/*\r\n    Plik:               ArtCard.js\r\n    Funkcja:            KARTA PRODUKTU\r\n    Opis:               Wyświetla bieżący produkt w karcie.\r\n    Elementy:           Zdjęcie {props.imagename}, \r\n                        nazwa produktu {props.name}, \r\n                        opis produktu {props.description}, \r\n                        cena {props.price}, \r\n                        wybór ilości +/-, \r\n                        przycisk koszyka\r\n    Przykład użycia:    <ArtCard imagename={nazwa_zdjecia} name={nazwa_artykulu} description={opis artykulu} price={cena} />\r\n    Dodatkowe info:     {nazwa_zdjecia} ma korespondowac z numerem artykulu w bazie danych\r\n*/\r\n\r\nimport React, { useState, useContext, useEffect } from 'react';\r\nimport App, { TotalContext } from '../../containers/App';\r\nimport carticon from '../../images/icons/black_cart.png';\r\nimport \"./ArtCard.scss\";                                                            // Import arkusza stylu dla dla komponentu\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Artcard = (props) =>{\r\n\r\n    const [counter, setCounter] = useState({\r\n        quantity: 0\r\n    })\r\n    //const [Cart, setCart] = useContext(CartContext);\r\n    const [Total, setTotal] = useContext(TotalContext);\r\n    //const [CartTemp, setCartTemp] = useState([]);\r\n\r\n    //let CartStorage\r\n    const Image = require('../../images/images/' + props.imagename + '.png');       // Ścieżka do zdjęcia\r\n\r\n    let ProdImgStyle;\r\n    ProdImgStyle = {                                                                // Stylizacja zdjęcia - zdjęcie jako tło karty\r\n        backgroundImage: \"url(\" + Image + \")\",\r\n        backgroundColor: 'white',\r\n    }\r\n\r\n    useEffect(() => {\r\n        //CartStorage = JSON.parse(localStorage.getItem('pscart'));\r\n        //setCartTemp(CartStorage);\r\n        //console.log(CartTemp);\r\n    }, []);\r\n\r\n    //console.log(initCart);\r\n\r\n    let CartStorage = JSON.parse(localStorage.getItem('pscart'));\r\n\r\n    const increaseQuantity = () => {\r\n        if (counter.quantity < 100) {\r\n            setCounter({\r\n                quantity: counter.quantity+1\r\n            })\r\n        }\r\n    }\r\n    \r\n    const decreaseQuantity = () => {\r\n        if(counter.quantity > 0) {\r\n            setCounter({\r\n                quantity: counter.quantity-1\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleQuantity = (event) => {\r\n        let regexp = /^[0-9\\b]+$/\r\n        let input = event.target.value\r\n        if (regexp.test(input)) {\r\n        setCounter({\r\n            quantity: parseInt(input)\r\n        })\r\n        } else {\r\n            document.querySelector(\".qInput\").value = 0;\r\n        }\r\n    }\r\n\r\n    const addProd = (prodid, name, desc, q, price, imagename) => {\r\n        let check = 0;\r\n        let idToChange;\r\n        let orSum = parseFloat((q*price));\r\n        //let CartStorage;\r\n\r\n        CartStorage.map((r, index) => {\r\n            if (r.prodid === prodid) {\r\n                check = 1\r\n                idToChange = parseInt(index);\r\n            }\r\n        })\r\n\r\n        if (q > 0) {\r\n            if (check === 0) {\r\n                \r\n                //setCart(prevCart => ([...Cart, {\r\n                    //id: Cart.length, \r\n                //    prodid: prodid,\r\n                //    name: name, \r\n                //    desc: desc,\r\n                //    price: parseFloat(price),\r\n                //   quantity: q, \r\n                //    prodtotal: q*price,\r\n                //    imagename: imagename\r\n                //}]))\r\n                \r\n                let CartStorageN = ([...CartStorage, {\r\n                    //id: CartStorage.length,\r\n                    prodid: prodid,\r\n                    name: name, \r\n                    shortdesc: props.shortdesc,\r\n                    desc: desc,\r\n                    price: parseFloat(price),\r\n                    quantity: q,                                                                               \r\n                    prodtotal: q*price,                             \r\n                    imagename: imagename\r\n                }]);\r\n                localStorage.setItem('pscart', JSON.stringify(CartStorageN))\r\n        \r\n                //console.log(newCartStorage);\r\n            } else {\r\n                //let newCart = [...Cart];\r\n                //newCart[idToChange].quantity = newCart[idToChange].quantity+q;\r\n                //newCart[idToChange].prodtotal = newCart[idToChange].price*newCart[idToChange].quantity;\r\n                let CartStorageN = [...CartStorage];\r\n                console.log(CartStorageN[idToChange]);\r\n                CartStorageN[idToChange].quantity = CartStorageN[idToChange].quantity+q;\r\n                CartStorageN[idToChange].prodtotal = CartStorageN[idToChange].price*CartStorageN[idToChange].quantity;\r\n                localStorage.setItem('pscart', JSON.stringify(CartStorageN))\r\n                const cartarray = [];\r\n    \r\n                const sum = Object.values(CartStorage)\r\n                  .map(obj => { cartarray.push(obj.prodtotal); return obj.prodtotal\r\n                })\r\n                  .reduce((sum, el) => {console.log(sum+el); return sum+el; }, 0);\r\n            \r\n                setTotal({total: sum});\r\n            }\r\n\r\n            setCounter({\r\n                quantity: 0\r\n            })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"artCard\">\r\n            <NavLink className=\"LinkToArtDetails\" to={{\r\n                pathname: \"/artdetails\",\r\n                artProps: {\r\n                    name: props.name,\r\n                    shortdesc: props.shortdesc,\r\n                    description: props.description,\r\n                    price: props.price,\r\n                    imagename: props.imagename,\r\n                    prodid: props.prodid\r\n                }\r\n                }}>\r\n                <div className=\"ProdImgContainer\" style={ProdImgStyle}></div>\r\n                <div className=\"ProdInfo\">\r\n                    <h4>{props.name}</h4>\r\n                    <p>{props.shortdesc}</p>\r\n            </div>\r\n            </NavLink>\r\n            <div className=\"ProdState\">\r\n                <div className=\"PriceOrder\">\r\n                    <p>{props.price}</p>\r\n                    <div className=\"OrderBar\">\r\n                        <button className=\"qBtn\" onClick={increaseQuantity}>+</button>\r\n                        <input className=\"qInput\" type=\"text\" value={counter.quantity} onChange={handleQuantity}/>\r\n                        <button className=\"qBtn\" onClick={decreaseQuantity}>-</button>\r\n                    </div>\r\n                </div>\r\n                <button className=\"ToCartBtn\" onClick={addProd.bind(this, props.prodid, props.name, props.shortdesc, counter.quantity, props.price, props.imagename)}><img className=\"carticonBtn\" src={carticon} alt=\"cart\"/>DO KOSZYKA</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Artcard;\r\n\r\n"]},"metadata":{},"sourceType":"module"}