{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\WSB_SELCOR\\\\PROJECT\\\\src\\\\containers\\\\RegCompany\\\\RegCompany.js\";\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './RegCompany.scss';\nimport Titlebar from '../../components/TitleBar/TitleBar';\nimport RegAccMain from '../../components/RegAccMain/RegAccMain';\nimport Axios from 'axios';\nimport { ServerPath } from '../App';\n\nconst RegCompany = () => {\n  const [Error, setError] = useState([]);\n  const [Form, setForm] = useState({\n    accounttype: 0,\n    login: null,\n    email: null,\n    pass0: null,\n    pass1: null,\n    cname: null,\n    cnip: null,\n    cregon: null,\n    cstreet: null,\n    chouse: null,\n    cflat: null,\n    czip1: null,\n    czip2: null,\n    ccity: null\n    /*\r\n       accounttype: 1,\r\n       login: 'ldij3455',\r\n       email: 'gtr@gmail.com',\r\n       pass0: null,\r\n       pass1: null,\r\n       iname: 'Janusz',\r\n       isurname: 'Nosacz',\r\n       istreet: 'Cebulowa',\r\n       ihouse: 23,\r\n       iflat: 5,\r\n       izip1: 55,\r\n       izip2: 100,\r\n       icity: 'Trzebnica'\r\n    */\n\n  });\n  const [ControlMenu, setControlMenu] = useState({\n    step1: true,\n    step2: false,\n    step3: false\n  });\n\n  const handleFields = (option, event) => {\n    switch (option) {\n      case 0:\n        {\n          setForm({ ...Form,\n            login: event.target.value\n          });\n        }\n        ;\n        break;\n\n      case 1:\n        {\n          setForm({ ...Form,\n            email: event.target.value\n          });\n        }\n        ;\n        break;\n\n      case 2:\n        {\n          setForm({ ...Form,\n            pass0: event.target.value\n          });\n        }\n        ;\n        break;\n\n      case 3:\n        {\n          setForm({ ...Form,\n            pass1: event.target.value\n          });\n        }\n        ;\n        break;\n\n      case 4:\n        {\n          setForm({ ...Form,\n            cname: event.target.value\n          });\n        }\n        ;\n        break;\n\n      case 5:\n        {\n          setForm({ ...Form,\n            cnip: event.target.value\n          });\n        }\n        ;\n        break;\n\n      case 6:\n        {\n          setForm({ ...Form,\n            cregon: event.target.value\n          });\n        }\n        ;\n        break;\n\n      case 7:\n        {\n          setForm({ ...Form,\n            cstreet: event.target.value\n          });\n        }\n        ;\n        break;\n\n      case 8:\n        {\n          setForm({ ...Form,\n            chouse: event.target.value\n          });\n        }\n        ;\n        break;\n\n      case 9:\n        {\n          setForm({ ...Form,\n            cflat: event.target.value\n          });\n        }\n        ;\n        break;\n\n      case 10:\n        {\n          setForm({ ...Form,\n            czip1: event.target.value\n          });\n        }\n        ;\n        break;\n\n      case 11:\n        {\n          setForm({ ...Form,\n            czip2: event.target.value\n          });\n        }\n        ;\n        break;\n\n      case 12:\n        {\n          setForm({ ...Form,\n            ccity: event.target.value\n          });\n        }\n        ;\n        break;\n    }\n  }; // ERRORS\n\n\n  let info0 = \"Pole Login jest puste\";\n  let info1 = \"Pole E-mail jest puste\";\n  let info2 = \"Pole Hasło jest puste\";\n  let info3 = \"Pole Powtórz hasło jest puste\";\n  let info4 = \"Login musi składać się przynajmniej z 3 liter\";\n  let info5 = \"Błędny format adresu e-mail\";\n  let info6 = \"Hasło powinno składać się przynajmniej z 8 znaków, 1 dużej litery i znaku specjalnego\";\n  let info7 = \"Hasła nie są identyczne\";\n  let info8 = \"Pole Nazwa firmy jest puste\";\n  let info9 = \"Pole Numer NIP jest puste\";\n  let info10 = \"Pole Numer REGON jest puste\";\n  let info11 = \"Pole Ulica jest puste\";\n  let info12 = \"Pole Nr domu jest puste\";\n  let info13 = \"Pole Kod pocztowy jest puste\";\n  let info14 = \"Kod pocztowy powinien składać się z cyfr - format: 00-000\";\n  let info15 = \"Pole Miejscowość jest puste\";\n  let info16 = \"Numer NIP powinien składać się z 10 cyfr - wzór: 0000000000\";\n  let info17 = \"Numer REGON powinien składać się z 9 cyfr - wzór: 000000000\";\n\n  const nextSite = option => {\n    let valid = true;\n    let ErrorContent = [];\n    let passFormat = new RegExp(\"^(?=.{8,}$)(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[\\\\W]).*$\");\n\n    switch (option) {\n      case 1:\n        {\n          if (Form.login === null || Form.login === \"\") {\n            valid = false;\n            ErrorContent = [...ErrorContent, info0];\n          } else if (Form.login.length < 3) {\n            valid = false;\n            ErrorContent = [...ErrorContent, info4];\n          }\n\n          if (Form.email === null || Form.email === \"\") {\n            valid = false;\n            ErrorContent = [...ErrorContent, info1];\n          } else if (!/\\S+@\\S+\\.\\S+/.test(Form.email)) {\n            valid = false;\n            ErrorContent = [...ErrorContent, info5];\n          }\n\n          if (Form.pass0 === null || Form.pass0 === \"\") {\n            valid = false;\n            ErrorContent = [...ErrorContent, info2];\n          }\n\n          if (Form.pass1 === null || Form.pass1 === \"\") {\n            valid = false;\n            ErrorContent = [...ErrorContent, info3];\n          } else if (!passFormat.test(Form.pass1)) {\n            valid = false;\n            ErrorContent = [...ErrorContent, info6];\n          } else if (Form.pass0 !== Form.pass1) {\n            valid = false;\n            ErrorContent = [...ErrorContent, info7];\n          }\n\n          setError(ErrorContent);\n\n          if (valid === true) {\n            setControlMenu({\n              step1: false,\n              step2: true,\n              step3: false\n            });\n          }\n        }\n        break;\n\n      case 2:\n        {\n          if (Form.cname === null || Form.cname === \"\") {\n            valid = false;\n            ErrorContent = [...ErrorContent, info8];\n          }\n\n          if (Form.cnip === null || Form.cnip === \"\") {\n            valid = false;\n            ErrorContent = [...ErrorContent, info9];\n          } else if (Form.cnip.length !== 10 || isNaN(Form.cnip)) {\n            valid = false;\n            ErrorContent = [...ErrorContent, info16];\n          }\n\n          if (Form.cregon === null || Form.cregon === \"\") {\n            valid = false;\n            ErrorContent = [...ErrorContent, info10];\n          } else if (Form.cregon.length !== 9 || isNaN(Form.cregon)) {\n            valid = false;\n            ErrorContent - [...ErrorContent, info17];\n          }\n\n          if (Form.cstreet === null || Form.cstreet === \"\") {\n            valid = false;\n            ErrorContent = [...ErrorContent, info11];\n          }\n\n          if (Form.chouse === null || Form.chouse === \"\") {\n            valid = false;\n            ErrorContent = [...ErrorContent, info12];\n          }\n\n          if (Form.czip1 === null || Form.czip1 === \"\" || Form.czip2 === null || Form.czip2 === \"\" || isNaN(Form.czip1) || isNaN(Form.czip2) || Form.czip1.length !== 2 || Form.czip2.length !== 3) {\n            valid = false;\n            ErrorContent = [...ErrorContent, info14];\n          }\n\n          if (Form.ccity === null || Form.ccity === \"\") {\n            valid = false;\n            ErrorContent = [...ErrorContent, info15];\n          }\n\n          setError(ErrorContent);\n\n          if (valid === true) {\n            let czip = Form.czip1 + \"-\" + Form.czip2;\n            setForm({ ...Form,\n              czip: czip\n            });\n            setControlMenu({\n              step1: false,\n              step2: false,\n              step3: true\n            });\n          }\n        }\n        ;\n        break;\n    }\n  };\n\n  const prevSite = option => {\n    switch (option) {\n      case 0:\n        {\n          setControlMenu({\n            step1: true,\n            step2: false,\n            step3: false\n          });\n          break;\n        }\n\n      case 1:\n        {\n          setControlMenu({\n            step1: false,\n            step2: true,\n            step3: false\n          });\n          break;\n        }\n    }\n  };\n\n  const History = useHistory();\n\n  const sendAccData = () => {\n    Axios.post(ServerPath + \"RegisterAccount\", Form).then(res => {\n      console.log(res.data);\n\n      if (res.data === \"success\") {\n        History.push({\n          pathname: '/login',\n          addProps: {\n            cartoption: true,\n            addinfo: \"Konto zostało pomyślnie założone. Możesz teraz zalogować się.\"\n          }\n        });\n      } else {\n        setError(res.data);\n      }\n    });\n  };\n\n  let RMStyle, RCStyle, RSStyle;\n  let s1, s2, s3;\n\n  if (ControlMenu.step1) {\n    RMStyle = {\n      display: 'block'\n    };\n    RCStyle = {\n      display: 'none'\n    };\n    RSStyle = {\n      display: 'none'\n    };\n    s1 = \"RegMilestone StepActive\";\n    s2 = \"RegMilestone\";\n    s3 = \"RegMilestone\";\n  }\n\n  if (ControlMenu.step2) {\n    RMStyle = {\n      display: 'none'\n    };\n    RCStyle = {\n      display: 'block'\n    };\n    RSStyle = {\n      display: 'none'\n    };\n    s1 = \"RegMilestone\";\n    s2 = \"RegMilestone StepActive\";\n    s3 = \"RegMilestone\";\n  }\n\n  if (ControlMenu.step3) {\n    RMStyle = {\n      display: 'none'\n    };\n    RCStyle = {\n      display: 'none'\n    };\n    RSStyle = {\n      display: 'block'\n    };\n    s1 = \"RegMilestone\";\n    s2 = \"RegMilestone\";\n    s3 = \"RegMilestone StepActive\";\n  }\n\n  let ErrorInfo;\n\n  if (Error.length > 0) {\n    ErrorInfo = Error.map((r, index) => {\n      return React.createElement(\"p\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, r);\n    });\n  }\n\n  console.log(Form);\n  return React.createElement(\"div\", {\n    className: \"RegCompany\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"RegTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, React.createElement(Titlebar, {\n    title: \"Rejestracja konta firmowego\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"RegMilestones\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: s1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, \"1\"), React.createElement(\"div\", {\n    className: s2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, \"2\"), React.createElement(\"div\", {\n    className: s3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, \"3\")), React.createElement(\"div\", {\n    className: \"RegMain\",\n    style: RMStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }, React.createElement(RegAccMain, {\n    next: nextSite.bind(this, 1),\n    handlelogin: handleFields.bind(this, 0),\n    handleemail: handleFields.bind(this, 1),\n    handlepass0: handleFields.bind(this, 2),\n    handlepass1: handleFields.bind(this, 3),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }));\n};\n\nexport default RegCompany;\n/*\r\n            <h1>Rejestracja konta firmowego</h1>\r\n                    <label htmlFor=\"u_login\">Login</label><br></br>\r\n                    <input required type=\"text\" name=\"u_login\" title=\"Proszę wpisać login\"></input><br></br>\r\n                    <label htmlFor=\"u_mail\">E-mail</label><br></br>\r\n                    <input required type=\"text\" name=\"u_mail\" title=\"Proszę podać adres mail\"></input><br></br>\r\n                    <label htmlFor=\"u_password\">Ulica</label><br></br>\r\n                    <input required type=\"text\" name=\"u_password\" title=\"Nowe hasło\"></input><br></br>\r\n                    <label htmlFor=\"u_passwordAgain\">Numer domu/bloku</label><br></br>\r\n                    <input required  type=\"numeric\" name=\"u_passwordAgain\" title=\"Powtórz hasło\"></input><br></br>\r\n                    <label htmlFor=\"cc_name\">Nazwa</label><br></br>\r\n                    <input required type=\"text\" name=\"cc_name\" title=\"Proszę podać nazwę firmy/działalności gospodarczej\"></input><br></br>\r\n                    <label htmlFor=\"cc_NIP\">NIP</label><br></br>\r\n                    <input required type=\"text\" name=\"cc_NIP\" title=\"Proszę podać NIP firmy\"></input><br></br>\r\n                    <label htmlFor=\"cc_REGON\">REGON</label><br></br>\r\n                    <input required type=\"text\" name=\"cc_REGON\" title=\"Proszę podać regon firmy\"></input><br></br>\r\n                    <label htmlFor=\"cc_street\">Ulica</label><br></br>\r\n                    <input required type=\"text\" name=\"cc_street\" title=\"Proszę podać ulicę na której znajduje sie siedziba firmy\"></input><br></br>\r\n                    <label htmlFor=\"cc_number\">Numer domu/bloku</label><br></br>\r\n                    <input required  type=\"numeric\" name=\"cc_number\" title=\"Proszę podać numer domu\"></input><br></br>\r\n                    <label htmlFor=\"cc_number_flat\">Numer mieszkania</label><br></br>\r\n                    <input required type=\"numeric\" name=\"cc_number_flat\" title=\"Proszę podać numer lokalu\"></input><br></br>\r\n                    <label htmlFor=\"cc_zip\">Kod pocztowy</label><br></br>\r\n                    <input required type=\"numeric\" name=\"cc_zip\" title=\"Proszę podać swoje kod pocztowy\"></input><br></br>\r\n                    <label htmlFor=\"cc_city\">Miejscowośc</label><br></br>\r\n                    <input required type=\"text\" name=\"cc_city\" title=\"Proszę podać miejscowość\"></input><br></br>\r\n*/","map":{"version":3,"sources":["C:/xampp/htdocs/WSB_SELCOR/PROJECT/src/containers/RegCompany/RegCompany.js"],"names":["React","useState","useHistory","Titlebar","RegAccMain","Axios","ServerPath","RegCompany","Error","setError","Form","setForm","accounttype","login","email","pass0","pass1","cname","cnip","cregon","cstreet","chouse","cflat","czip1","czip2","ccity","ControlMenu","setControlMenu","step1","step2","step3","handleFields","option","event","target","value","info0","info1","info2","info3","info4","info5","info6","info7","info8","info9","info10","info11","info12","info13","info14","info15","info16","info17","nextSite","valid","ErrorContent","passFormat","RegExp","length","test","isNaN","czip","prevSite","History","sendAccData","post","then","res","console","log","data","push","pathname","addProps","cartoption","addinfo","RMStyle","RCStyle","RSStyle","s1","s2","s3","display","ErrorInfo","map","r","index","bind"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport './RegCompany.scss';\r\nimport Titlebar from '../../components/TitleBar/TitleBar';\r\nimport RegAccMain from '../../components/RegAccMain/RegAccMain';\r\nimport Axios from 'axios';\r\nimport { ServerPath } from '../App';\r\n\r\nconst RegCompany = () => {\r\n    const [Error, setError] = useState([]);\r\n    const [Form, setForm] = useState({\r\n        \r\n        accounttype: 0,\r\n        login: null,\r\n        email: null,\r\n        pass0: null,\r\n        pass1: null,\r\n        cname: null,\r\n        cnip: null,\r\n        cregon: null,\r\n        cstreet: null,\r\n        chouse: null,\r\n        cflat: null,\r\n        czip1: null,\r\n        czip2: null,\r\n        ccity: null\r\n    /*\r\n       accounttype: 1,\r\n       login: 'ldij3455',\r\n       email: 'gtr@gmail.com',\r\n       pass0: null,\r\n       pass1: null,\r\n       iname: 'Janusz',\r\n       isurname: 'Nosacz',\r\n       istreet: 'Cebulowa',\r\n       ihouse: 23,\r\n       iflat: 5,\r\n       izip1: 55,\r\n       izip2: 100,\r\n       icity: 'Trzebnica'\r\n    */\r\n    });\r\n\r\n    const [ControlMenu, setControlMenu] = useState({step1: true, step2: false, step3: false});\r\n\r\n    const handleFields = (option, event) => {\r\n        switch(option) {\r\n            case 0: {setForm({...Form, login: event.target.value})}; break;\r\n            case 1: {setForm({...Form, email: event.target.value})}; break;\r\n            case 2: {setForm({...Form, pass0: event.target.value})}; break;\r\n            case 3: {setForm({...Form, pass1: event.target.value})}; break;\r\n            case 4: {setForm({...Form, cname: event.target.value})}; break;\r\n            case 5: {setForm({...Form, cnip: event.target.value})}; break;\r\n            case 6: {setForm({...Form, cregon: event.target.value})}; break;\r\n            case 7: {setForm({...Form, cstreet: event.target.value})}; break;\r\n            case 8: {setForm({...Form, chouse: event.target.value})}; break;\r\n            case 9: {setForm({...Form, cflat: event.target.value})}; break;\r\n            case 10: {setForm({...Form, czip1: event.target.value})}; break;\r\n            case 11: {setForm({...Form, czip2: event.target.value})}; break;\r\n            case 12: {setForm({...Form, ccity: event.target.value})}; break;\r\n        }\r\n    }\r\n\r\n     // ERRORS\r\n\r\n     let info0 = \"Pole Login jest puste\";\r\n     let info1 = \"Pole E-mail jest puste\";\r\n     let info2 = \"Pole Hasło jest puste\";\r\n     let info3 = \"Pole Powtórz hasło jest puste\";\r\n     let info4 = \"Login musi składać się przynajmniej z 3 liter\";\r\n     let info5 = \"Błędny format adresu e-mail\";\r\n     let info6 = \"Hasło powinno składać się przynajmniej z 8 znaków, 1 dużej litery i znaku specjalnego\";\r\n     let info7 = \"Hasła nie są identyczne\";\r\n     let info8 = \"Pole Nazwa firmy jest puste\";\r\n     let info9 = \"Pole Numer NIP jest puste\";\r\n     let info10 = \"Pole Numer REGON jest puste\";\r\n     let info11 = \"Pole Ulica jest puste\";\r\n     let info12 = \"Pole Nr domu jest puste\";\r\n     let info13 = \"Pole Kod pocztowy jest puste\";\r\n     let info14 = \"Kod pocztowy powinien składać się z cyfr - format: 00-000\";\r\n     let info15 = \"Pole Miejscowość jest puste\";\r\n     let info16 = \"Numer NIP powinien składać się z 10 cyfr - wzór: 0000000000\"\r\n     let info17 = \"Numer REGON powinien składać się z 9 cyfr - wzór: 000000000\"\r\n\r\n     const nextSite = (option) => {\r\n        let valid = true;\r\n        let ErrorContent = [];\r\n        let passFormat = new RegExp(\"^(?=.{8,}$)(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9])(?=.*?[\\\\W]).*$\");\r\n\r\n        switch(option) {\r\n            case 1: {\r\n                if(Form.login === null || Form.login === \"\") {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info0];\r\n                } else if (Form.login.length < 3) {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info4];\r\n                }\r\n                if(Form.email === null || Form.email === \"\") {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info1];\r\n                } else if (!/\\S+@\\S+\\.\\S+/.test(Form.email)) {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info5];\r\n                }\r\n                if(Form.pass0 === null || Form.pass0 === \"\") {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info2];\r\n                }\r\n                if(Form.pass1 === null || Form.pass1 === \"\") {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info3];\r\n                } else if (!passFormat.test(Form.pass1)) {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info6];\r\n                } else if (Form.pass0 !== Form.pass1) {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info7];\r\n                }\r\n                \r\n                setError(ErrorContent);\r\n\r\n                if (valid === true) {\r\n                    setControlMenu({step1: false, step2: true, step3: false})\r\n                }\r\n            } break;\r\n            case 2: {\r\n                if(Form.cname === null || Form.cname === \"\") {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info8];\r\n                }\r\n                if(Form.cnip === null || Form.cnip === \"\") {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info9];\r\n                } else if (Form.cnip.length !== 10 || isNaN(Form.cnip)) {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info16];\r\n                }\r\n                if(Form.cregon === null || Form.cregon === \"\") {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info10];\r\n                } else if (Form.cregon.length !== 9 || isNaN(Form.cregon)) {\r\n                    valid = false;\r\n                    ErrorContent - [...ErrorContent, info17];\r\n                }\r\n                if(Form.cstreet === null || Form.cstreet === \"\") {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info11];\r\n                }\r\n                if(Form.chouse === null || Form.chouse === \"\") {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info12];\r\n                }\r\n                if( Form.czip1 === null || Form.czip1 === \"\" || Form.czip2 === null || \r\n                    Form.czip2 === \"\" || isNaN(Form.czip1) || isNaN(Form.czip2) ||\r\n                    Form.czip1.length !== 2 || Form.czip2.length !== 3) {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info14];\r\n                }\r\n                if(Form.ccity === null || Form.ccity === \"\") {\r\n                    valid = false;\r\n                    ErrorContent = [...ErrorContent, info15];\r\n                } \r\n\r\n                setError(ErrorContent)\r\n\r\n                if (valid === true) {\r\n                    let czip = Form.czip1 + \"-\" + Form.czip2;\r\n                    setForm({...Form, czip: czip});\r\n                    setControlMenu({step1: false, step2: false, step3: true})\r\n                }\r\n            }; break;\r\n        }\r\n    }\r\n\r\n    const prevSite = (option) => {\r\n        switch(option) {\r\n            case 0: {\r\n                setControlMenu({step1: true, step2: false, step3: false}); break;\r\n            }\r\n            case 1: {\r\n                setControlMenu({step1: false, step2: true, step3: false}); break;\r\n            }\r\n        }\r\n    }\r\n\r\n    const History = useHistory();\r\n\r\n    const sendAccData = () => {\r\n        Axios.post(ServerPath + \"RegisterAccount\", Form)\r\n            .then(res => {\r\n                console.log(res.data);\r\n                if (res.data === \"success\") {\r\n                    History.push({\r\n                        pathname: '/login',\r\n                        addProps: {\r\n                            cartoption: true,\r\n                            addinfo: \"Konto zostało pomyślnie założone. Możesz teraz zalogować się.\"\r\n                        }\r\n                    })\r\n                } else {\r\n                    setError(res.data);\r\n                }\r\n            })\r\n    }\r\n\r\n    let RMStyle, RCStyle, RSStyle;\r\n    let s1, s2, s3;\r\n\r\n    if (ControlMenu.step1) {\r\n        RMStyle = {display: 'block'}; \r\n        RCStyle = {display: 'none'};\r\n        RSStyle = {display: 'none'};\r\n        s1 = \"RegMilestone StepActive\"; s2 = \"RegMilestone\"; s3 = \"RegMilestone\"\r\n    }\r\n    if (ControlMenu.step2) {\r\n        RMStyle = {display: 'none'};\r\n        RCStyle = {display: 'block'};\r\n        RSStyle = {display: 'none'};\r\n        s1 = \"RegMilestone\"; s2 = \"RegMilestone StepActive\"; s3 = \"RegMilestone\"\r\n    }\r\n    if (ControlMenu.step3) {\r\n        RMStyle = {display: 'none'};\r\n        RCStyle = {display: 'none'};\r\n        RSStyle = {display: 'block'};\r\n        s1 = \"RegMilestone\"; s2 = \"RegMilestone\"; s3 = \"RegMilestone StepActive\"\r\n    }\r\n\r\n    let ErrorInfo;\r\n\r\n    if (Error.length > 0) {\r\n        ErrorInfo = (\r\n            Error.map((r, index) => {\r\n                return(\r\n                <p key={index}>{r}</p>\r\n                )\r\n            })\r\n        )\r\n    }\r\n\r\n    console.log(Form);\r\n\r\n    return(\r\n        <div className=\"RegCompany\">\r\n            <div className=\"RegTitle\">\r\n                <Titlebar title=\"Rejestracja konta firmowego\"/>\r\n            </div>\r\n            <div className=\"RegMilestones\">\r\n                <div className={s1}>1</div>\r\n                <div className={s2}>2</div>\r\n                <div className={s3}>3</div>\r\n            </div>\r\n            <div className=\"RegMain\" style={RMStyle}>\r\n                <RegAccMain\r\n                    next={nextSite.bind(this, 1)}\r\n                    handlelogin={handleFields.bind(this, 0)}\r\n                    handleemail={handleFields.bind(this, 1)}\r\n                    handlepass0={handleFields.bind(this, 2)}\r\n                    handlepass1={handleFields.bind(this, 3)}\r\n                />\r\n            </div>\r\n            <div>\r\n                \r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegCompany;\r\n\r\n/*\r\n            <h1>Rejestracja konta firmowego</h1>\r\n                    <label htmlFor=\"u_login\">Login</label><br></br>\r\n                    <input required type=\"text\" name=\"u_login\" title=\"Proszę wpisać login\"></input><br></br>\r\n                    <label htmlFor=\"u_mail\">E-mail</label><br></br>\r\n                    <input required type=\"text\" name=\"u_mail\" title=\"Proszę podać adres mail\"></input><br></br>\r\n                    <label htmlFor=\"u_password\">Ulica</label><br></br>\r\n                    <input required type=\"text\" name=\"u_password\" title=\"Nowe hasło\"></input><br></br>\r\n                    <label htmlFor=\"u_passwordAgain\">Numer domu/bloku</label><br></br>\r\n                    <input required  type=\"numeric\" name=\"u_passwordAgain\" title=\"Powtórz hasło\"></input><br></br>\r\n                    <label htmlFor=\"cc_name\">Nazwa</label><br></br>\r\n                    <input required type=\"text\" name=\"cc_name\" title=\"Proszę podać nazwę firmy/działalności gospodarczej\"></input><br></br>\r\n                    <label htmlFor=\"cc_NIP\">NIP</label><br></br>\r\n                    <input required type=\"text\" name=\"cc_NIP\" title=\"Proszę podać NIP firmy\"></input><br></br>\r\n                    <label htmlFor=\"cc_REGON\">REGON</label><br></br>\r\n                    <input required type=\"text\" name=\"cc_REGON\" title=\"Proszę podać regon firmy\"></input><br></br>\r\n                    <label htmlFor=\"cc_street\">Ulica</label><br></br>\r\n                    <input required type=\"text\" name=\"cc_street\" title=\"Proszę podać ulicę na której znajduje sie siedziba firmy\"></input><br></br>\r\n                    <label htmlFor=\"cc_number\">Numer domu/bloku</label><br></br>\r\n                    <input required  type=\"numeric\" name=\"cc_number\" title=\"Proszę podać numer domu\"></input><br></br>\r\n                    <label htmlFor=\"cc_number_flat\">Numer mieszkania</label><br></br>\r\n                    <input required type=\"numeric\" name=\"cc_number_flat\" title=\"Proszę podać numer lokalu\"></input><br></br>\r\n                    <label htmlFor=\"cc_zip\">Kod pocztowy</label><br></br>\r\n                    <input required type=\"numeric\" name=\"cc_zip\" title=\"Proszę podać swoje kod pocztowy\"></input><br></br>\r\n                    <label htmlFor=\"cc_city\">Miejscowośc</label><br></br>\r\n                    <input required type=\"text\" name=\"cc_city\" title=\"Proszę podać miejscowość\"></input><br></br>\r\n*/"]},"metadata":{},"sourceType":"module"}